// SPDX-FileCopyrightText: 2023 Marshall Wace <opensource@mwam.com>
// SPDX-License-Identifier: Apache-2.0
// SPDX-FileContributor: Tim Kendrick <t.kendrick@mwam.com> https://github.com/timkendrickmw
import abs from './abs.test.mjs';
import add from './add.test.mjs';
import and from './and.test.mjs';
import apply from './apply.test.mjs';
import car from './car.test.mjs';
import cdr from './cdr.test.mjs';
import ceil from './ceil.test.mjs';
import chain from './chain.test.mjs';
import collectHashmap from './collect_hashmap.test.mjs';
import collectList from './collect_list.test.mjs';
import collectString from './collect_string.test.mjs';
import collectTree from './collect_tree.test.mjs';
import cons from './cons.test.mjs';
import divide from './divide.test.mjs';
import effect from './effect.test.mjs';
import endsWith from './ends_with.test.mjs';
import eq from './eq.test.mjs';
import equal from './equal.test.mjs';
import floor from './floor.test.mjs';
import fold from './fold.test.mjs';
import get from './get.test.mjs';
import gt from './gt.test.mjs';
import gte from './gte.test.mjs';
import has from './has.test.mjs';
import hash from './hash.test.mjs';
import identity from './identity.test.mjs';
import _if from './if.test.mjs';
import ifError from './if_error.test.mjs';
import ifPending from './if_pending.test.mjs';
import iterate from './iterate.test.mjs';
import keys from './keys.test.mjs';
import length from './length.test.mjs';
import lt from './lt.test.mjs';
import lte from './lte.test.mjs';
import max from './max.test.mjs';
import min from './min.test.mjs';
import multiply from './multiply.test.mjs';
import not from './not.test.mjs';
import or from './or.test.mjs';
import pow from './pow.test.mjs';
import push from './push.test.mjs';
import pushFront from './push_front.test.mjs';
import remainder from './remainder.test.mjs';
import replace from './replace.test.mjs';
import resolveDeep from './resolve_deep.test.mjs';
import resolveShallow from './resolve_shallow.test.mjs';
import round from './round.test.mjs';
import set from './set.test.mjs';
import sequence from './sequence.test.mjs';
import skip from './skip.test.mjs';
import slice from './slice.test.mjs';
import split from './split.test.mjs';
import startsWith from './starts_with.test.mjs';
import subtract from './subtract.test.mjs';
import take from './take.test.mjs';
import values from './values.test.mjs';
import zip from './zip.test.mjs';
import parseJson from './json/parse_json.test.mjs';
import stringifyJson from './json/stringify_json.test.mjs';
import resolveQueryBranch from './graphql/resolve_query_branch.test.mjs';
import resolveQueryLeaf from './graphql/resolve_query_leaf.test.mjs';

export default (describe) => {
  abs(describe);
  add(describe);
  and(describe);
  apply(describe);
  car(describe);
  cdr(describe);
  ceil(describe);
  chain(describe);
  collectHashmap(describe);
  collectList(describe);
  collectString(describe);
  collectTree(describe);
  cons(describe);
  divide(describe);
  effect(describe);
  endsWith(describe);
  eq(describe);
  equal(describe);
  floor(describe);
  fold(describe);
  get(describe);
  gt(describe);
  gte(describe);
  has(describe);
  hash(describe);
  identity(describe);
  _if(describe);
  ifError(describe);
  ifPending(describe);
  iterate(describe);
  keys(describe);
  length(describe);
  lt(describe);
  lte(describe);
  max(describe);
  min(describe);
  multiply(describe);
  not(describe);
  or(describe);
  pow(describe);
  push(describe);
  pushFront(describe);
  remainder(describe);
  replace(describe);
  resolveDeep(describe);
  resolveShallow(describe);
  round(describe);
  set(describe);
  sequence(describe);
  skip(describe);
  slice(describe);
  split(describe);
  startsWith(describe);
  subtract(describe);
  take(describe);
  values(describe);
  zip(describe);
  parseJson(describe);
  stringifyJson(describe);
  resolveQueryBranch(describe);
  resolveQueryLeaf(describe);
};
